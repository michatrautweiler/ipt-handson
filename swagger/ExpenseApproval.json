{
  "swagger": "2.0",
  "info": {
    "description": "TODO",
    "version": "1.0.0",
    "title": "Swagger ExpenseApproval",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "rha@ipt.ch"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "devtest-ipt.ddns.net:8001",
  "basePath": "/v2",
  "tags": [
    {
      "name": "Expense",
      "description": "Submit Expense"
    },
    {
      "name": "Approval",
      "description": "Get Approval"
    },
    {
      "name": "Fraud",
      "description": "Report Fraud"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/expense": {
      "post": {
        "tags": [
          "Expense"
        ],
        "summary": "Submit a new Expense Item",
        "description": "",
        "operationId": "submitExpense",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Expense Item to be submitted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "ExpenseApproval_auth": [
              "write:expenses",
              "read:expenses"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Expense"
        ],
        "summary": "Update an existing Expense",
        "description": "",
        "operationId": "updateEpense",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Expense object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Expense not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "ExpenseApproval_auth": [
              "write:expenses",
              "read:expenses"
            ]
          }
        ]
      }
    },
    "/expense/findById": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Finds Expenses by Id",
        "description": "Multiple Ids can be provided with comma separated strings",
        "operationId": "findExpensesByStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Id values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "default": "1"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Expense"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ExpenseApproval_auth": [
              "write:expenses",
              "read:expenses"
            ]
          }
        ]
      }
    },
    "/expense/{expenseId}": {
      "get": {
        "tags": [
          "Expense"
        ],
        "summary": "Find Expense by Id",
        "description": "Returns a single expense",
        "operationId": "getExpenseById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "expenseId",
            "in": "path",
            "description": "ID of expense to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Expense"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Expense not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Expense"
        ],
        "summary": "Deletes an expense",
        "description": "",
        "operationId": "deleteExpense",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "expenseId",
            "in": "path",
            "description": "User id to which expense belongs",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Expense not found"
          }
        },
        "security": [
          {
            "ExpenseApproval_auth": [
              "write:expenses",
              "read:expenses"
            ]
          }
        ]
      }
    },
    "/approval/findByExpenseId": {
      "get": {
        "tags": [
          "Approval"
        ],
        "summary": "Finds approvals by ExpenseId",
        "description": "Multiple Ids can be provided with comma separated strings",
        "operationId": "findByExpenseId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "expenseId",
            "in": "query",
            "description": "Id values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "default": "1"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "ExpenseApproval_auth": [
              "write:expenses",
              "read:expenses"
            ]
          }
        ]
      }
    },
    "/fraudreport": {
      "post": {
        "tags": [
          "FraudReport"
        ],
        "summary": "Submit a new FraudReport",
        "description": "",
        "operationId": "submitFraudReport",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "FraudReport Item to be submitted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FraudReport"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "ExpenseApproval_auth": [
              "write:expenses",
              "read:expenses"
            ]
          }
        ]
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "ExpenseApproval_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://ExpenseApproval.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:expenses": "modify expenses in your account",
        "read:expenses": "read your expenses"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Expense": {
      "type": "object",
      "required": [
        "userId",
        "expenseId",
        "category",
        "description",
        "amount",
        "latitude",
        "longitude"
      ],
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "expenseId": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "description": {
          "type": "string",
          "example": "Essensspesen"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "latitude": {
          "type": "string",
          "example": "41.40338"
        },
        "longitude": {
          "type": "string",
          "example": "2.17403"
        }
      },
      "xml": {
        "name": "Expense"
      }
    },
    "Approval": {
      "type": "object",
      "required": [
        "userId",
        "expenseId",
        "approvalState",
        "approvalResult"
      ],
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "expenseId": {
          "type": "integer",
          "format": "int64"
        },
        "approvalState": {
          "type": "string",
          "description": "Approval State",
          "enum": [
            "new",
            "pending",
            "complete"
          ]
        },
        "approvalResult": {
          "type": "string",
          "description": "Approval Result",
          "enum": [
            "approved",
            "rejected"
          ]
        }
      }
    },
    "FraudReport": {
      "type": "object",
      "required": [
        "userId",
        "expenseId",
        "reason"
      ],
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "expenseId": {
          "type": "integer",
          "format": "int64"
        },
        "reason": {
          "type": "string",
          "example": "suspicious pattern"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}